esphome:
  name: stage-countdown
  friendly_name: stage-countdown
  on_boot:
    then:
      - delay: 15s
      - lambda: |-
           ESP_LOGD("clock.boot", "Boot; resetting RGB and effect");
           id(reset).press();

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable Home Assistant API
api:
  encryption:
    key: !secret stage_clock_encryption_key

ota:
  password: stage_clock_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  

logger:
  level: DEBUG


globals:
  - id: timer_state_previous
    type: std::string
    restore_value: no
    initial_value: '"idle"'

light:
  - platform: status_led
    name: "Status LED"
    id: status_light
    pin: GPIO23

  - platform: neopixelbus
    type: GRB
    id: strip
    variant: WS2812 # WS2812B
    pin: GPIO22
    method:
      type: esp32_i2s
      bus: 0
    num_leds: 94
    default_transition_length: 0.5s
    effects:
      - pulse:
          name: "pulse"
          transition_length: 0.5s
          update_interval: 1s
          min_brightness: 0%
          max_brightness: 70%
      - addressable_lambda:
          name: "time_is_up"
          update_interval: 500ms
          lambda: |-
            static bool state = true;

            if (state) {
              it.range(0, 3) = Color(255, 0, 0);
              it.range(44,47) = Color(255, 0, 0);
            } else {
              it.range(0,3) = Color::BLACK;
              it.range(44,47) = Color::BLACK;
            }
            state = !state;

    name: "NeoPixel Light"

  # ========================== Digit 1 ==========================
  - platform: partition
    id: dig_1
    segments:
      - id: strip
        from: 0
        to: 21
    
  - platform: partition
    id: dig_1_0
    segments:
      - id: strip
        from: 3
        to: 21
     
  - platform: partition
    id: dig_1_1
    segments:
      - id: strip
        from: 9
        to: 15

  - platform: partition
    id: dig_1_2
    segments:
      - id: strip
        from: 6
        to: 11
      - id: strip
        from: 0
        to: 2
      - id: strip
        from: 16
        to: 21

  - platform: partition
    id: dig_1_3
    segments:
      - id: strip
        from: 6
        to: 11
      - id: strip
        from: 0
        to: 2
      - id: strip
        from: 13
        to: 18

  - platform: partition
    id: dig_1_4
    segments:
      - id: strip
        from: 0
        to: 5
      - id: strip
        from: 9
        to: 15
      
  - platform: partition
    id: dig_1_5
    segments:
      - id: strip
        from: 0
        to: 8
      - id: strip
        from: 13
        to: 18

  - platform: partition
    id: dig_1_6
    segments:
      - id: strip
        from: 0
        to: 8
      - id: strip
        from: 13
        to: 21

  - platform: partition
    id: dig_1_7
    segments:
      - id: strip
        from: 6
        to: 15
      
  - platform: partition
    id: dig_1_8
    segments:
      - id: strip
        from: 0
        to: 21

  - platform: partition
    id: dig_1_9
    segments:
      - id: strip
        from: 0
        to: 18
  
  # ========================== Digit 2 ==========================
  - platform: partition
    id: dig_2
    segments:
      - id: strip
        from: 25
        to: 46
    
  - platform: partition
    id: dig_2_0
    segments:
      - id: strip
        from: 25
        to: 43
     
     
  - platform: partition
    id: dig_2_1
    segments:
      - id: strip
        from: 25
        to: 27
      - id: strip
        from: 41
        to: 43

  - platform: partition
    id: dig_2_2
    segments:
      - id: strip
        from: 38
        to: 46
      - id: strip
        from: 28
        to: 33

  - platform: partition
    id: dig_2_3
    segments:
      - id: strip
        from: 38
        to: 46
      - id: strip
        from: 25
        to: 30

  - platform: partition
    id: dig_2_4
    segments:
      - id: strip
        from: 35
        to: 37
      - id: strip
        from: 41
        to: 46
      - id: strip
        from: 25
        to: 27
      
  - platform: partition
    id: dig_2_5
    segments:
      - id: strip
        from: 25
        to: 30
      - id: strip
        from: 35
        to: 40
      - id: strip
        from: 44
        to: 46

  - platform: partition
    id: dig_2_6
    segments:
      - id: strip
        from: 25
        to: 40
      - id: strip
        from: 44
        to: 46

  - platform: partition
    id: dig_2_7
    segments:
      - id: strip
        from: 25
        to: 27
      - id: strip
        from: 38
        to: 43
      
  - platform: partition
    id: dig_2_8
    segments:
      - id: strip
        from: 25
        to: 46

  - platform: partition
    id: dig_2_9
    segments:
      - id: strip
        from: 25
        to: 30
      - id: strip
        from: 35
        to: 46
  

sensor:
  - platform: homeassistant
    id: time_left
    entity_id: sensor.stage_clock_minutes_left
    internal: true
    on_value:
      then:
        - lambda: |-


            if (strcmp(id(timer_state).state.c_str(), "active") == 0 && strcmp(id(strip).get_effect_name().c_str(), "None") != 0) {
              ESP_LOGD("clock.time_left", "Timer is active, disabling the running effect %s", id(strip).get_effect_name().c_str());
              id(strip).turn_on().set_rgb(1,1,1).set_brightness(id(intensity).state).set_effect("none").perform();
              id(strip).turn_off().set_transition_length(0).perform();
            }

            int value = (int)x;

            int tens = (value % 100) / 10;
            int ones = value % 10;
            
            ESP_LOGD("clock.time_left", "digit2.old=%f; digit2.new=%f; digit1.old=%f; digit1.new=%f", id(digit_2).state, tens, id(digit_1).state, ones);
            if (id(digit_2).state == 0 && id(digit_1).state == 1 && tens == 0 && ones == 0) {
              ESP_LOGD("clock.time_left", "Timer has finished (time is up), starting effect");
              id(strip).turn_on().set_rgb(1,0,0).set_effect("pulse").perform();
            }

            auto call_2 = id(digit_2).make_call();
            call_2.set_value(tens);
            call_2.perform();

            auto call_1 = id(digit_1).make_call();
            call_1.set_value(ones);
            call_1.perform();
            
text_sensor:
  - platform: homeassistant
    id: timer_state
    entity_id: timer.stage_clock
    internal: true
    on_value:
      then:
        - delay: 1s
        - lambda: |-
            id(timer_state_previous) = x;

  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"
    mac_address:
      name: "Mac Address"

number:
  - platform: template
    id: intensity
    name: "Intensity"
    icon: "mdi:brightness-4"
    update_interval: 10s
    initial_value: 0.6
    step: 0.1
    min_value: 0.1
    max_value: 1.0
    mode: slider
    optimistic: true
    restore_value: true
    

  - platform: template
    name: "Digit 1"
    id: digit_1
    optimistic: true
    min_value: 0
    max_value: 9
    step: 1
    on_value:
      then:
        - lambda: |- 
            id(dig_1).turn_off().perform();
            
            float r = 1;
            float g = 1;
            float b = 1;


            if (id(time_left).state < 3) {
              g = 0;
              b = 0;
              ESP_LOGD("clock.digit_1", "time_left.state=%f; changing digit_1 color to red", id(time_left).state);
            } else if (id(time_left).state < 5) {
              b = 0;
              ESP_LOGD("clock.digit_1", "time_left.state=%f; changing digit_1 color to yellow", id(time_left).state);
            }
            
            if (x == 0) {
              auto on_call = id(dig_1_0).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

            if (x == 1) {
              auto on_call = id(dig_1_1).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 2) {
              auto on_call = id(dig_1_2).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 3) {
              auto on_call = id(dig_1_3).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 4) {
              auto on_call = id(dig_1_4).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 5) {
              auto on_call = id(dig_1_5).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 6) {
              auto on_call = id(dig_1_6).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 7) {
              auto on_call = id(dig_1_7).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 8) {
              auto on_call = id(dig_1_8).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 9) {
              auto on_call = id(dig_1_9).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
 

  - platform: template
    name: "Digit 2"
    id: digit_2
    optimistic: true
    min_value: 0
    max_value: 9
    step: 1
    on_value:
      then:
        - lambda: |- 
            id(dig_2).turn_off().perform();
            
            float r = 1;
            float g = 1;
            float b = 1;

            if (id(time_left).state < 3) {
              g = 0;
              b = 0;
              ESP_LOGD("clock.digit_1", "time_left.state=%f; changing digit_2 color to red", id(time_left).state);
            } else if (id(time_left).state < 5) {
              b = 0;
              ESP_LOGD("clock.digit_1", "time_left.state=%f; changing digit_2 color to red", id(time_left).state);
            }
            
            if (x == 0) {
              auto on_call = id(dig_2_0).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

            if (x == 1) {
              auto on_call = id(dig_2_1).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 2) {
              auto on_call = id(dig_2_2).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 3) {
              auto on_call = id(dig_2_3).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 4) {
              auto on_call = id(dig_2_4).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 5) {
              auto on_call = id(dig_2_5).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 6) {
              auto on_call = id(dig_2_6).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 7) {
              auto on_call = id(dig_2_7).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 8) {
              auto on_call = id(dig_2_8).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 9) {
              auto on_call = id(dig_2_9).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

button:
  - platform: template
    name: Reset
    id: reset
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("clock.reset", "Resetting RGB lights");
            id(strip).turn_on().set_brightness(id(intensity).state).set_effect("none").set_rgb(1,1,1).perform();            
            id(strip).turn_off().perform();
            id(status_light).turn_on().perform();