esphome:
  name: portable-clock
  friendly_name: portable-clock
  on_boot:
    then:
      - delay: 15s
      - lambda: |-
           ESP_LOGD("clock.boot", "Boot; resetting RGB and effect");
           id(reset).press();

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable Home Assistant API
api:
  encryption:
    key: !secret portable_clock_encryption_key

ota:
  password: !secret portable_clock_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.6.105
    subnet: 255.255.255.0
    gateway: 192.168.6.100
  

logger:
  level: DEBUG


globals:

  - id: mode_hass
    type: bool
    restore_value: no
    initial_value: 'true'
  
  - id: local_seconds_left
    type: int
    restore_value: no
    initial_value: '0'


light:
  - platform: status_led
    name: "Status LED"
    id: status_light
    pin: GPIO23

  - platform: neopixelbus
    type: GRB
    id: strip
    variant: WS2812 # WS2812B
    pin: GPIO22
    method:
      type: esp32_i2s
      bus: 0
    num_leds: 94
    default_transition_length: 0.5s
    effects:
      - pulse:
          name: "pulse"
          transition_length: 0.5s
          update_interval: 1s
          min_brightness: 0%
          max_brightness: 70%
      - addressable_lambda:
          name: "time_is_up"
          update_interval: 500ms
          lambda: |-
            static bool state = true;

            if (state) {
              it.range(0, 3) = Color(255, 0, 0);
              it.range(44,47) = Color(255, 0, 0);
            } else {
              it.range(0,3) = Color::BLACK;
              it.range(44,47) = Color::BLACK;
            }
            state = !state;

    name: "NeoPixel Light"

  # ========================== Digit 1 ==========================
  - platform: partition
    id: dig_1
    segments:
      - id: strip
        from: 0
        to: 21
    
  - platform: partition
    id: dig_1_0
    segments:
      - id: strip
        from: 3
        to: 21
     
  - platform: partition
    id: dig_1_1
    segments:
      - id: strip
        from: 9
        to: 15

  - platform: partition
    id: dig_1_2
    segments:
      - id: strip
        from: 6
        to: 11
      - id: strip
        from: 0
        to: 2
      - id: strip
        from: 16
        to: 21

  - platform: partition
    id: dig_1_3
    segments:
      - id: strip
        from: 6
        to: 11
      - id: strip
        from: 0
        to: 2
      - id: strip
        from: 13
        to: 18

  - platform: partition
    id: dig_1_4
    segments:
      - id: strip
        from: 0
        to: 5
      - id: strip
        from: 9
        to: 15
      
  - platform: partition
    id: dig_1_5
    segments:
      - id: strip
        from: 0
        to: 8
      - id: strip
        from: 13
        to: 18

  - platform: partition
    id: dig_1_6
    segments:
      - id: strip
        from: 0
        to: 8
      - id: strip
        from: 13
        to: 21

  - platform: partition
    id: dig_1_7
    segments:
      - id: strip
        from: 6
        to: 15
      
  - platform: partition
    id: dig_1_8
    segments:
      - id: strip
        from: 0
        to: 21

  - platform: partition
    id: dig_1_9
    segments:
      - id: strip
        from: 0
        to: 18
  
  # ========================== Digit 2 ==========================
  - platform: partition
    id: dig_2
    segments:
      - id: strip
        from: 25
        to: 46
    
  - platform: partition
    id: dig_2_0
    segments:
      - id: strip
        from: 25
        to: 43
     
     
  - platform: partition
    id: dig_2_1
    segments:
      - id: strip
        from: 25
        to: 27
      - id: strip
        from: 41
        to: 43

  - platform: partition
    id: dig_2_2
    segments:
      - id: strip
        from: 38
        to: 46
      - id: strip
        from: 28
        to: 33

  - platform: partition
    id: dig_2_3
    segments:
      - id: strip
        from: 38
        to: 46
      - id: strip
        from: 25
        to: 30

  - platform: partition
    id: dig_2_4
    segments:
      - id: strip
        from: 35
        to: 37
      - id: strip
        from: 41
        to: 46
      - id: strip
        from: 25
        to: 27
      
  - platform: partition
    id: dig_2_5
    segments:
      - id: strip
        from: 25
        to: 30
      - id: strip
        from: 35
        to: 40
      - id: strip
        from: 44
        to: 46

  - platform: partition
    id: dig_2_6
    segments:
      - id: strip
        from: 25
        to: 40
      - id: strip
        from: 44
        to: 46

  - platform: partition
    id: dig_2_7
    segments:
      - id: strip
        from: 25
        to: 27
      - id: strip
        from: 38
        to: 43
      
  - platform: partition
    id: dig_2_8
    segments:
      - id: strip
        from: 25
        to: 46

  - platform: partition
    id: dig_2_9
    segments:
      - id: strip
        from: 25
        to: 30
      - id: strip
        from: 35
        to: 46
  

sensor:
  - platform: homeassistant
    id: time_left
    entity_id: sensor.stage_clock_minutes_left
    internal: true
    on_value:
      then:
        - lambda: |-

            if (id(mode_hass) == false) {
              return;
            }

            if (id(local_state).state == 1 && strcmp(id(strip).get_effect_name().c_str(), "None") != 0) {
              ESP_LOGD("clock.time_left", "Timer is active, disabling the running effect %s", id(strip).get_effect_name().c_str());
              id(strip).turn_on().set_rgb(1,1,1).set_brightness(id(intensity).state).set_effect("none").perform();
              id(strip).turn_off().set_transition_length(0).perform();
            }

            int value = (int)x;

            int tens = (value % 100) / 10;
            int ones = value % 10;

            float minutes_left = tens * 10 + ones;

            id(local_minutes_left).make_call().set_value(minutes_left).perform();

            
  - platform: rotary_encoder
    name: "Rotary Encoder"
    restore_mode: ALWAYS_ZERO
    pin_a:
      number: GPIO13
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO12
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      - then:
        - lambda: |-
            if (id(mode_hass)) {
              id(mode_hass) = false;
              id(reset).press();
            }

            if (id(local_state).state == 3) {
              id(reset).press();
            }

            if (id(local_minutes_left).state > 0) {
              id(local_minutes_left).make_call().number_decrement(true).perform();
            }
            ESP_LOGD("rotary.anticlockwise", "Decrementing minutes left; %f minutes left;", id(local_minutes_left).state);
    on_clockwise:
      - then:
        - lambda: |-
            if (id(mode_hass)) {
              id(mode_hass) = false;
              id(reset).press();
            }

            if (id(local_minutes_left).state < 99) {
              id(local_minutes_left).make_call().number_increment(true).perform();
            }
            ESP_LOGD("rotary.clockwise", "Incrementing minutes left; %f minutes left;", id(local_minutes_left).state);
          
text_sensor:
  - platform: homeassistant
    id: timer_state
    entity_id: timer.stage_clock
    internal: true
    on_value:
      then:
        - delay: 1s
        - lambda: |-
            int new_local_state = 0;

            if (strcmp(x.c_str(), "active") == 0) {
              new_local_state = 1;
            } else if (strcmp(x.c_str(), "paused") == 0) {
              new_local_state = 0;
            } else if (strcmp(x.c_str(), "idle") == 0) {
              new_local_state = 0;
            }
            id(local_state).make_call().set_value(new_local_state).perform();

  - platform: wifi_info
    ip_address:
      name: "IP Address"
    ssid:
      name: "Connected SSID"
    mac_address:
      name: "Mac Address"

number:
  - platform: template
    id: intensity
    name: "Intensity"
    icon: "mdi:brightness-4"
    update_interval: 10s
    initial_value: 0.6
    step: 0.1
    min_value: 0.1
    max_value: 1.0
    mode: slider
    optimistic: true
    restore_value: true

  # 0 - idle
  # 1 - active
  # 2 - finished
  # 3 - paused
  - platform: template
    internal: true
    id: local_state
    update_interval: 1s
    initial_value: 0
    min_value: 0
    max_value: 3
    step: 1
    restore_value: false
    optimistic: true
    on_value:
      - then:
          - lambda: |-
              int value = (int)x;
              ESP_LOGD("number.local_state", "New local state is %d", value);

              if (value == 2) {
                ESP_LOGD("number.local_state", "Timer has finished (time is up), starting effect");
                id(strip).turn_on().set_rgb(1,0,0).set_effect("pulse").perform();
              }
              if (value == 0) {
                id(strip).turn_on().set_brightness(id(intensity).state).set_effect("none").set_rgb(1,1,1).perform();            
                id(strip).turn_off().perform();
              }
  - platform: template
    internal: true
    id: local_minutes_left
    update_interval: 1s
    initial_value: 1
    min_value: 0
    max_value: 99
    step: 1
    restore_value: false
    optimistic: true
    on_value:
      - then:
          - lambda: |-

              if (id(local_state).state == 0) {
                return;
              }
              
              int value = (int)x;
              int tens = (value % 100) / 10;
              int ones = value % 10;

              ESP_LOGD("number.local_minutes_left", "digit2.old=%f; digit2.new=%f; digit1.old=%f; digit1.new=%f", id(digit_2).state, tens, id(digit_1).state, ones);
              if (id(digit_2).state == 0 && id(digit_1).state == 1 && tens == 0 && ones == 0 && id(mode_hass)) {
                ESP_LOGD("number.local_minutes_left", "Timer has finished (time is up), starting effect");
                id(strip).turn_on().set_rgb(1,0,0).set_effect("pulse").perform();
              }

              auto call_2 = id(digit_2).make_call();
              call_2.set_value(tens);
              call_2.perform();

              auto call_1 = id(digit_1).make_call();
              call_1.set_value(ones);
              call_1.perform();

  - platform: template
    name: "Digit 1"
    id: digit_1
    optimistic: true
    min_value: 0
    max_value: 9
    step: 1
    on_value:
      then:
        - lambda: |- 
            id(dig_1).turn_off().perform();
            
            float r = 1;
            float g = 1;
            float b = 1;

            if (id(local_minutes_left).state < 3) {
              g = 0;
              b = 0;
              ESP_LOGD("clock.digit_1", "minutes_left=%f; changing digit_1 color to red", id(local_minutes_left).state);
            } else if (id(local_minutes_left).state < 5) {
              b = 0;
              ESP_LOGD("clock.digit_1", "minutes_left=%f; changing digit_1 color to yellow", id(local_minutes_left).state);
            }
            
            if (x == 0) {
              auto on_call = id(dig_1_0).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

            if (x == 1) {
              auto on_call = id(dig_1_1).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 2) {
              auto on_call = id(dig_1_2).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 3) {
              auto on_call = id(dig_1_3).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 4) {
              auto on_call = id(dig_1_4).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 5) {
              auto on_call = id(dig_1_5).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 6) {
              auto on_call = id(dig_1_6).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 7) {
              auto on_call = id(dig_1_7).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 8) {
              auto on_call = id(dig_1_8).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 9) {
              auto on_call = id(dig_1_9).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
 

  - platform: template
    name: "Digit 2"
    id: digit_2
    optimistic: true
    min_value: 0
    max_value: 9
    step: 1
    on_value:
      then:
        - lambda: |- 
            id(dig_2).turn_off().perform();
            
            float r = 1;
            float g = 1;
            float b = 1;

            if (id(local_minutes_left).state < 3) {
              g = 0;
              b = 0;
              ESP_LOGD("clock.digit_1", "minutes_left=%f; changing digit_2 color to red", id(local_minutes_left).state);
            } else if (id(local_minutes_left).state < 5) {
              b = 0;
              ESP_LOGD("clock.digit_1", "minutes_left=%f; changing digit_2 color to red", id(local_minutes_left).state);
            }
            
            if (x == 0) {
              auto on_call = id(dig_2_0).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

            if (x == 1) {
              auto on_call = id(dig_2_1).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 2) {
              auto on_call = id(dig_2_2).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 3) {
              auto on_call = id(dig_2_3).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 4) {
              auto on_call = id(dig_2_4).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 5) {
              auto on_call = id(dig_2_5).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 6) {
              auto on_call = id(dig_2_6).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 7) {
              auto on_call = id(dig_2_7).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 8) {
              auto on_call = id(dig_2_8).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }
            if (x == 9) {
              auto on_call = id(dig_2_9).turn_on();
              on_call.set_brightness(id(intensity).state);
              on_call.set_rgb(r, g, b);
              on_call.perform();
            }

button:
  - platform: template
    name: Reset
    id: reset
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("clock.reset", "Resetting RGB lights");
            id(local_minutes_left).make_call().set_value(1).perform();
            id(local_seconds_left) = 0;
            id(strip).turn_on().set_brightness(id(intensity).state).set_effect("none").set_rgb(1,1,1).perform();            
            id(strip).turn_off().perform();
            id(status_light).turn_on().perform();
            id(local_state).make_call().set_value(0).perform();
            id(local_timer_tick).stop();

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO27
      mode:
        input: true
        pullup: true
      inverted: true
    id: encoder_switch
    name: "Encoder Switch"
    on_press:
      then:

        - lambda: |-
            if (id(local_state).state == 0) {
              id(strip).turn_on().set_brightness(id(intensity).state).set_effect("none").set_rgb(1,1,1).perform();
              id(strip).turn_off().perform();
              id(local_state).make_call().set_value(1).perform();
              id(local_seconds_left) = 0;
              id(local_timer_tick).execute();
            } else {
              id(reset).press();
            }
script:
  - id: local_timer_tick
    mode: queued
    then:
      - delay: 1s
      - lambda: |-
          id(local_seconds_left) -= 1;

          if (id(local_seconds_left) == 0 && id(local_minutes_left).state == 0) {
            id(local_state).make_call().set_value(2).perform();
            ESP_LOGD("clock.local_tick", "Timer FINISHED");
            return;
          }

          if (id(local_seconds_left) <= 0) {
            id(local_minutes_left).make_call().number_decrement(true).perform();
            id(local_seconds_left) = 59;
          }

          if (id(local_state).state == 1) {
            id(local_timer_tick).execute();
          }
          
          ESP_LOGD("clock.local_tick", "local time left: minutes=%d, seconds=%d", id(local_minutes_left).state, id(local_seconds_left));
        
i2c:
  sda: 17
  scl: 16
  scan: false
  id: bus_a


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 500ms
    rotation: 0
    lambda: |-
      it.clear();
      
      if (id(mode_hass)) {
        it.print(5, 5, id(roboto), "Mode");
        it.print(95, 5, id(roboto), "HASS");
      } else {
        it.print(5, 5, id(roboto), "Mode");
        it.print(85, 5, id(roboto), "LOCAL");
      }
      it.line(5, 20, 123, 20);
      
      if (id(mode_hass)) {
        if (id(local_state).state == 1) {
          it.image(10, 25, id(timer_play));
          it.printf(60, 25, id(roboto_lg), "%02.0f", id(time_left).state);
        } else if (id(local_state).state == 3) {
          it.image(10, 25, id(timer_paused));
          it.printf(60, 25, id(roboto_lg), "%02.0f", id(time_left).state);
        } else {
          it.image(50, 25, id(loading));
        }
      } else {

        it.printf(45, 25, id(roboto_md), "%02.0f:%02d", id(local_minutes_left).state, id(local_seconds_left));
              
        if (id(local_state).state == 1) {
          it.image(4, 25, id(timer_play));
        } else if (id(local_state).state == 0) {
          it.image(4, 25, id(timer_paused));
        } else {
          it.image(4, 25, id(loading));
        }
      }

image:
  - file: mdi:timer-play-outline
    id: timer_play
    resize: 36x36
  - file: mdi:timer-pause-outline
    id: timer_paused
    resize: 36x36
  - file: mdi:timer-sand-empty
    id: loading
    resize: 36x36

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 12
  - file: "gfonts://Roboto@900"
    id: roboto_lg
    size: 32
  - file: "gfonts://Roboto@900"
    id: roboto_md
    size: 28